openapi: 3.0.0
info:
  title: Recipes api
  description: API for recipes project
  version: 1.0.1
servers:
  # local:
  - url: "http://127.0.0.1:3000"
    # remote:
    # - url: "http://132.72.65.211"
    description: SwaggerHub API Auto Mocking hey
tags:
  - name: Auth
    description: All authentication related routes
  - name: Users
    description: All the user's personal app info
  - name: Recipes
    description: All reciepes general info
paths:
  /register:
    post:
      tags:
        - Auth
      summary: A new user from the client is added to the server
      description: A JSON object contains all the details about the new user.
      requestBody:
        description: Inventory item to add
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/User"
        required: true
      responses:
        "201":
          description: A new user has been added
        "409":
          description: wrong input parameters
  /login:
    post:
      tags:
        - Auth
      summary: Login an exist user
      description: An exist user login to the system
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/LoginScheme"
        required: true
      responses:
        "200":
          description: |
            User was found in the DB and authenitcated successfully. The session ID is returned in a cookie named `session`.  You should include this cookie in subsequent requests
          headers:
            Set-Cookie:
              style: simple
              explode: false
              schema:
                type: string
                example: session=87s97sdhgf279293f8w0e9
        "401":
          description: Authentication failed
        "403":
          description: User already connected
  /logout:
    post:
      tags:
        - Auth
      summary: logout a user from the system and delete his cookie
      responses:
        "200":
          description: "the user has ben successfully logged out"
        "403":
          description: "no logged in user"
  /users/favorites:
    get:
      tags:
        - Users
      summary: Return the favorite recipes that were saved by user
      description: Get an array of recipes that were saved by a specific user
      responses:
        "200":
          description: data about the user's favorites recipes returned
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Recipe"
        "204":
          description: no items in user's favorites
        "401":
          description: user is not authorized
      security:
        - cookieAuth: []
    put:
      tags:
        - Users
      summary: save recipe in the favorites list of a user
      description: save recipe in the favorites list of a user
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                recipeId:
                  type: string
                  description: reciepe's id which the user saved
                  example: 123
      responses:
        "200":
          description: The Recipe successfully saved as favorite
        "400":
          description: bad request
        "401":
          description: user is not authorized
        "404":
          description: recipe with id not found
        "409":
          description: Asset already in DB
      security:
        - cookieAuth: []
  /users/lastWatched:
    get:
      tags:
        - Users
      summary: Return the last watched recipes of a user
      description: Get an array of recipes that were last watched by a specific user
      responses:
        "200":
          description: Data about the user's last watched recipes returned
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Recipe"
        "204":
          description: no items in user's lastWatched
        "401":
          description: User is not authorized
      security:
        - cookieAuth: []
    put:
      tags:
        - Users
      summary: Add a recipe to the last watched list of a user
      description: Add a recipe to the last watched list of a user
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                recipeId:
                  type: string
                  description: Recipe's ID which the user wants to add to the last watched list
                  example: 123
      responses:
        "200":
          description: The recipe was successfully added to the last watched list
        "400":
          description: bad request
        "401":
          description: User is not authorized
        "404":
          description: recipe with id not found
        "409":
          description: Asset already in DB
      security:
        - cookieAuth: []
  /users/myRecipes:
    get:
      tags:
        - Users
      summary: Return the recipes added by a user
      description: Get an array of recipes added by a specific user
      responses:
        "200":
          description: Data about the user's recipes returned
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Recipe"
        "204":
          description: no items in user's myRecipes
        "401":
          description: User is not authorized
      security:
        - cookieAuth: []
    put:
      tags:
        - Users
      summary: Add a recipe to the user's recipe list
      description: Add a recipe to the recipe list of a user
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                recipeId:
                  type: string
                  description: Recipe's ID which the user wants to add to their recipe list
                  example: 123
      responses:
        "200":
          description: The recipe was successfully added to the user's recipe list
        "400":
          description: bad request
        "401":
          description: User is not authorized
        "404":
          description: recipe with id not found
        "409":
          description: Asset already in DB
      security:
        - cookieAuth: []
  /users/searchLimit:
    get:
      tags:
        - Users
      summary: Return the searchLimit of user
      description: Get int of searchLimit for specific user
      responses:
        "200":
          description: user's searchLimit returned
          content:
            application/json:
              schema:
                type: integer
                example: 10
        "401":
          description: User is not authorized
      security:
        - cookieAuth: []
    put:
      tags:
        - Users
      summary: Set the searchLimit of user
      description: Set searchLimit of a user
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                searchLimit:
                  type: integer
                  description: searchLimit of user to change setting
                  example: 10
      responses:
        "200":
          description: The searchLimit was changed successfully on the user's
        "401":
          description: User is not authorized
      security:
        - cookieAuth: []
  /recipes:
    post:
      tags:
        - Recipes
      requestBody:
        description: add New Recepie
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Recipe"
      responses:
        "201":
          description: Recipe added successfully
        "401":
          description: User is not authorized
        "405":
          description: Method not allowed
        "409":
          description: Asset already in DB
        "500":
          description: Internal server error
  /recipes/{recipeId}:
    get:
      tags:
        - Recipes
      summary: Return details on recipe by his ID
      description: Return details on recipe by his ID
      parameters:
        - name: recipeId
          in: path
          description: recipe's id
          required: true
          style: simple
          explode: false
          schema:
            type: integer
      responses:
        "200":
          description: data about the recipe
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Recipe"
        "400":
          description: Invalid or missing parameters
        "404":
          description: recipeId is not exists
        "500":
          description: Internal server error
  /recipes/random:
    get:
      tags:
        - Recipes
      summary: Returns 3 random recipes
      description: Returns 3 random recipes
      responses:
        "200":
          description: Get 3 random recipes
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Recipe"
        "400":
          description: Invalid or missing parameters
        "401":
          description: User is not authorized
        "404":
          description: No recipes found
        "500":
          description: Internal server error
  /recipes/search:
    get:
      tags:
        - Recipes
      summary: Search recipes by user's limitations
      description: Returns recipes
      parameters:
        - in: header
          name: text
          schema:
            type: string
          description: The search string that will be used
          example: Simple Macaroni and Cheese
        - in: header
          name: limit
          schema:
            type: number
            description: "5 / 10 / 15 returned recipes"
            example: 10
            enum:
              - 5
              - 10
              - 15
        - in: header
          name: cuisines
          schema:
            type: array
            items:
              type: string
              enum:
                - African
                - Asian
                - American
                - British
                - Cajun
                - Caribbean
                - Chinese
                - Eastern European
                - European
                - French
                - German
                - Greek
                - Indian
                - Irish
                - Italian
                - Japanese
                - Jewish
                - Korean
                - Latin American
                - Mediterranean
                - Mexican
                - Middle Eastern
                - Nordic
                - Southern
                - Spanish
                - Thai
                - Vietnamese
          description: Filter to specific cuisines.
          example: [Indian, Italian]
        - in: header
          name: diets
          schema:
            type: array
            items:
              type: string
              enum:
                - Gluten Free
                - Ketogenic
                - Vegetarian
                - Lacto-Vegetarian
                - Ovo-Vegetarian
                - Vegan
                - Pescetarian
                - Paleo
                - Primal
                - Low FODMAP
                - Whole30
          description: Dairy/ Gluten free/ Vegan recipe.
          example: [Gluten Free, Vegan]
        - in: header
          name: intolerances
          schema:
            type: array
            items:
              type: string
              enum:
                - Dairy
                - Egg
                - Gluten
                - Grain
                - Peanut
                - Seafood
                - Sesame
                - Shellfish
                - Soy
                - Sulfite
                - Tree Nut
                - Wheat
          description: Text to filter by food intolerance or none (empty means none).
          example: [Dairy, Gluten]
      responses:
        "200":
          description: Get recipes
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Recipe"
        "204":
          description: No content
        "400":
          description: Invalid or missing parameters
        "401":
          description: User is not authorized
        "404":
          description: No recipes found
        "405":
          description: Method not allowed
        "500":
          description: Internal server error
components:
  schemas:
    User:
      type: object
      properties:
        username:
          maxLength: 8
          minLength: 3
          type: string
          description: username conatins between 3 to 8 letters only
          example: my_name
        firstname:
          type: string
          description: user's first name
          example: my_first_name
        lastname:
          type: string
          description: user's last name
          example: my_last_name
        country:
          type: string
          description: user's country
          example: Israel
        password:
          maxLength: 10
          minLength: 5
          type: string
          description:
            password conatins between 5 to 10 chars, at least one of them
            is a number and a special char
          format: password
          example: my_name@12
        email:
          pattern: email
          type: string
          description: user's email
          example: my_name12@gmail.com
        # image-url:
        #   pattern: URL
        #   type: string
        #   description: URL for the user's image
        #   example: https://cloudinary.com/
      description: Model containing user info
    LoginScheme:
      type: object
      properties:
        username:
          maxLength: 8
          minLength: 3
          type: string
          description: username conatins letters only
        password:
          maxLength: 10
          minLength: 5
          description: password conatins at least one number and one special char
          format: password
      example:
        username: my_name
        password: my_name@12
    Recipe:
      type: object
      properties:
        id:
          type: integer
          description: recipe identifier
          example: 102
        title:
          type: string
          description: recipe name
          example: Simple Macaroni and Cheese
        image:
          type: string
          description: recipe image
          format: URL
          example: https://spoonacular.com/recipeimages/655455-566x370.jpg
        readyInMinutes:
          type: integer
          description: the time takes to make this recipe
          example: 45
        popularity:
          type: integer
          description: how many likes got this recipe
          example: 5987
        vegetarian:
          type: boolean
          description: indication if the recipe is vegetarian
          example: false
        vegan:
          type: boolean
          description: indication if the recipe is vegan
          example: false
        glutenFree:
          type: boolean
          description: indication if the recipe is gluten free
          example: false
